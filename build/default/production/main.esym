D G "__PCM__" 0 0 ""5.078""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""7-JUL-18""
D G "__TIME__" 0 0 ""13:31:37""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?""
D G "__16F877A" 0 0 "1" "* File:   main.c"
C G "" 0 1 1 "*"
C G "" 0 1 2 "*"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `55 
f B "set_tris_a" 1 37 "void(int8 value)" `54 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `57 
f B "set_tris_b" 1 38 "void(int8 value)" `56 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `59 
f B "set_tris_c" 1 39 "void(int8 value)" `58 
f N "set_tris_d" 1 40 ""
v L "value" 1 40 "int8" `61 
f B "set_tris_d" 1 40 "void(int8 value)" `60 
f N "set_tris_e" 1 41 ""
v L "value" 1 41 "int8" `63 
f B "set_tris_e" 1 41 "void(int8 value)" `62 
f N "get_tris_a" 1 42 ""
f B "get_tris_a" 1 42 "int8()" `64 
f N "get_tris_b" 1 43 ""
f B "get_tris_b" 1 43 "int8()" `65 
f N "get_tris_c" 1 44 ""
f B "get_tris_c" 1 44 "int8()" `66 
f N "get_tris_d" 1 45 ""
f B "get_tris_d" 1 45 "int8()" `67 
f N "get_tris_e" 1 46 ""
f B "get_tris_e" 1 46 "int8()" `68 
f N "output_a" 1 47 ""
v L "value" 1 47 "int8" `70 
f B "output_a" 1 47 "void(int8 value)" `69 
f N "output_b" 1 48 ""
v L "value" 1 48 "int8" `72 
f B "output_b" 1 48 "void(int8 value)" `71 
f N "output_c" 1 49 ""
v L "value" 1 49 "int8" `74 
f B "output_c" 1 49 "void(int8 value)" `73 
f N "output_d" 1 50 ""
v L "value" 1 50 "int8" `76 
f B "output_d" 1 50 "void(int8 value)" `75 
f N "output_e" 1 51 ""
v L "value" 1 51 "int8" `78 
f B "output_e" 1 51 "void(int8 value)" `77 
f N "input_a" 1 52 ""
f B "input_a" 1 52 "int8()" `79 
f N "input_b" 1 53 ""
f B "input_b" 1 53 "int8()" `80 
f N "input_c" 1 54 ""
f B "input_c" 1 54 "int8()" `81 
f N "input_d" 1 55 ""
f B "input_d" 1 55 "int8()" `82 
f N "input_e" 1 56 ""
f B "input_e" 1 56 "int8()" `83 
f N "input_change_a" 1 57 ""
f B "input_change_a" 1 57 "int8()" `84 
f N "input_change_b" 1 58 ""
f B "input_change_b" 1 58 "int8()" `85 
f N "input_change_c" 1 59 ""
f B "input_change_c" 1 59 "int8()" `86 
f N "input_change_d" 1 60 ""
f B "input_change_d" 1 60 "int8()" `87 
f N "input_change_e" 1 61 ""
f B "input_change_e" 1 61 "int8()" `88 
f N "port_b_pullups" 1 62 ""
v L "value" 1 62 "int8" `90 
f B "port_b_pullups" 1 62 "void(int8 value)" `89 
f N "input" 1 63 ""
v L "pin" 1 63 "int16" `92 
f B "input" 1 63 "int8(int16 pin)" `91 
f N "input_state" 1 64 ""
v L "pin" 1 64 "int16" `94 
f B "input_state" 1 64 "int8(int16 pin)" `93 
f N "output_low" 1 65 ""
v L "pin" 1 65 "int16" `96 
f B "output_low" 1 65 "void(int16 pin)" `95 
f N "output_high" 1 66 ""
v L "pin" 1 66 "int16" `98 
f B "output_high" 1 66 "void(int16 pin)" `97 
f N "output_toggle" 1 67 ""
v L "pin" 1 67 "int16" `100 
f B "output_toggle" 1 67 "void(int16 pin)" `99 
f N "output_bit" 1 68 ""
v L "pin" 1 68 "int16" `102 
v L "level" 1 68 "int8" `103 
f B "output_bit" 1 68 "void(int16 pin,int8 level)" `101 
f N "output_float" 1 69 ""
v L "pin" 1 69 "int16" `105 
f B "output_float" 1 69 "void(int16 pin)" `104 
f N "output_drive" 1 70 ""
v L "pin" 1 70 "int16" `107 
f B "output_drive" 1 70 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 74 "40"
d G "PIN_A1" 1 75 "41"
d G "PIN_A2" 1 76 "42"
d G "PIN_A3" 1 77 "43"
d G "PIN_A4" 1 78 "44"
d G "PIN_A5" 1 79 "45"
d G "PIN_B0" 1 81 "48"
d G "PIN_B1" 1 82 "49"
d G "PIN_B2" 1 83 "50"
d G "PIN_B3" 1 84 "51"
d G "PIN_B4" 1 85 "52"
d G "PIN_B5" 1 86 "53"
d G "PIN_B6" 1 87 "54"
d G "PIN_B7" 1 88 "55"
d G "PIN_C0" 1 90 "56"
d G "PIN_C1" 1 91 "57"
d G "PIN_C2" 1 92 "58"
d G "PIN_C3" 1 93 "59"
d G "PIN_C4" 1 94 "60"
d G "PIN_C5" 1 95 "61"
d G "PIN_C6" 1 96 "62"
d G "PIN_C7" 1 97 "63"
d G "PIN_D0" 1 99 "64"
d G "PIN_D1" 1 100 "65"
d G "PIN_D2" 1 101 "66"
d G "PIN_D3" 1 102 "67"
d G "PIN_D4" 1 103 "68"
d G "PIN_D5" 1 104 "69"
d G "PIN_D6" 1 105 "70"
d G "PIN_D7" 1 106 "71"
d G "PIN_E0" 1 108 "72"
d G "PIN_E1" 1 109 "73"
d G "PIN_E2" 1 110 "74"
d G "FALSE" 1 113 "0"
d G "TRUE" 1 114 "1"
d G "BYTE" 1 116 "int8"
d G "BOOLEAN" 1 117 "int1"
d G "getc" 1 119 "getch"
d G "fgetc" 1 120 "getch"
d G "getchar" 1 121 "getch"
d G "putc" 1 122 "putchar"
d G "fputc" 1 123 "putchar"
d G "fgets" 1 124 "gets"
d G "fputs" 1 125 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 130 ""
f B "restart_cause" 1 130 "int8()" `108 
f N "reset_cpu" 1 131 ""
f B "reset_cpu" 1 131 "void()" `109 
f N "sleep" 1 132 ""
f B "sleep" 1 132 "void()" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 134 "3"
d G "WDT_TIMEOUT" 1 135 "11"
d G "MCLR_FROM_SLEEP" 1 136 "19"
d G "MCLR_FROM_RUN" 1 137 "27"
d G "NORMAL_POWER_UP" 1 138 "25"
d G "BROWNOUT_RESTART" 1 139 "26"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 146 ""
v L "mode" 1 146 "int8" `112 
f B "setup_timer_0" 1 146 "void(int8 mode)" `111 
f N "set_timer0" 1 147 ""
v L "value" 1 147 "int8" `114 
f B "set_timer0" 1 147 "void(int8 value)" `113 
f N "get_timer0" 1 148 ""
f B "get_timer0" 1 148 "int8()" `115 
f N "setup_counters" 1 149 ""
v L "mode" 1 149 "int8" `117 
v L "prescaler" 1 149 "int8" `118 
f B "setup_counters" 1 149 "void(int8 mode,int8 prescaler)" `116 
f N "set_rtcc" 1 150 ""
v L "value" 1 150 "int8" `120 
f B "set_rtcc" 1 150 "void(int8 value)" `119 
f N "get_rtcc" 1 151 ""
f B "get_rtcc" 1 151 "int8()" `121  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 153 "0"
d G "T0_EXT_L_TO_H" 1 154 "32"
d G "T0_EXT_H_TO_L" 1 155 "48"
d G "T0_DIV_1" 1 157 "8"
d G "T0_DIV_2" 1 158 "0"
d G "T0_DIV_4" 1 159 "1"
d G "T0_DIV_8" 1 160 "2"
d G "T0_DIV_16" 1 161 "3"
d G "T0_DIV_32" 1 162 "4"
d G "T0_DIV_64" 1 163 "5"
d G "T0_DIV_128" 1 164 "6"
d G "T0_DIV_256" 1 165 "7"
d G "T0_8_BIT" 1 168 "0"
d G "RTCC_INTERNAL" 1 172 "0"
d G "RTCC_EXT_L_TO_H" 1 173 "32"
d G "RTCC_EXT_H_TO_L" 1 174 "48"
d G "RTCC_DIV_1" 1 175 "8"
d G "RTCC_DIV_2" 1 176 "0"
d G "RTCC_DIV_4" 1 177 "1"
d G "RTCC_DIV_8" 1 178 "2"
d G "RTCC_DIV_16" 1 179 "3"
d G "RTCC_DIV_32" 1 180 "4"
d G "RTCC_DIV_64" 1 181 "5"
d G "RTCC_DIV_128" 1 182 "6"
d G "RTCC_DIV_256" 1 183 "7"
d G "RTCC_8_BIT" 1 184 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 195 ""
v L "mode" 1 195 "int16" `123 
f B "setup_wdt" 1 195 "void(int16 mode)" `122 
f N "restart_wdt" 1 196 ""
f B "restart_wdt" 1 196 "void()" `124  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 199 "8"
d G "WDT_36MS" 1 200 "9"
d G "WDT_72MS" 1 201 "10"
d G "WDT_144MS" 1 202 "11"
d G "WDT_288MS" 1 203 "12"
d G "WDT_576MS" 1 204 "13"
d G "WDT_1152MS" 1 205 "14"
d G "WDT_2304MS" 1 206 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 212 ""
v L "mode" 1 212 "int16" `126 
f B "setup_timer_1" 1 212 "void(int16 mode)" `125 
f N "get_timer1" 1 213 ""
f B "get_timer1" 1 213 "int16()" `127 
f N "set_timer1" 1 214 ""
v L "value" 1 214 "int16" `129 
f B "set_timer1" 1 214 "void(int16 value)" `128  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 217 "0"
d G "T1_INTERNAL" 1 218 "0x85"
d G "T1_EXTERNAL" 1 219 "0x87"
d G "T1_EXTERNAL_SYNC" 1 220 "0x83"
d G "T1_CLK_OUT" 1 222 "8"
d G "T1_DIV_BY_1" 1 224 "0"
d G "T1_DIV_BY_2" 1 225 "0x10"
d G "T1_DIV_BY_4" 1 226 "0x20"
d G "T1_DIV_BY_8" 1 227 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 232 ""
v L "mode" 1 232 "int8" `131 
v L "period" 1 232 "int8" `132 
v L "postscale" 1 232 "int8" `133 
f B "setup_timer_2" 1 232 "void(int8 mode,int8 period,int8 postscale)" `130 
f N "get_timer2" 1 233 ""
f B "get_timer2" 1 233 "int8()" `134 
f N "set_timer2" 1 234 ""
v L "value" 1 234 "int8" `136 
f B "set_timer2" 1 234 "void(int8 value)" `135  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 236 "0"
d G "T2_DIV_BY_1" 1 237 "4"
d G "T2_DIV_BY_4" 1 238 "5"
d G "T2_DIV_BY_16" 1 239 "6"
c L "set_timer2" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 245 ""
v L "mode" 1 245 "int32" `138 
f B "setup_ccp1" 1 245 "void(int32 mode)" `137 
f N "setup_ccp1" 1 246 ""
v L "mode" 1 246 "int32" `140 
v L "pwm" 1 246 "int8" `141 
f B "setup_ccp1" 1 246 "void(int32 mode,int8 pwm)" `139 
f N "set_pwm1_duty" 1 247 ""
v L "value" 1 247 "int16" `143 
f B "set_pwm1_duty" 1 247 "void(int16 value)" `142  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 249 "0"
d G "CCP_CAPTURE_FE" 1 250 "0x04"
d G "CCP_CAPTURE_RE" 1 251 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 252 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 253 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 254 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 255 "0x09"
d G "CCP_COMPARE_INT" 1 256 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 257 "0x0B"
d G "CCP_PWM" 1 258 "0x0C"
d G "CCP_PWM_PLUS_1" 1 259 "0x1c"
d G "CCP_PWM_PLUS_2" 1 260 "0x2c"
d G "CCP_PWM_PLUS_3" 1 261 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
f N "setup_ccp2" 1 268 ""
v L "mode" 1 268 "int32" `148 
f B "setup_ccp2" 1 268 "void(int32 mode)" `147 
f N "setup_ccp2" 1 269 ""
v L "mode" 1 269 "int32" `150 
v L "pwm" 1 269 "int8" `151 
f B "setup_ccp2" 1 269 "void(int32 mode,int8 pwm)" `149 
f N "set_pwm2_duty" 1 270 ""
v L "value" 1 270 "int16" `153 
f B "set_pwm2_duty" 1 270 "void(int16 value)" `152 
c L "set_pwm2_duty" 1 1 5 "FUNCTION"
f N "setup_psp" 1 279 ""
v L "mode" 1 279 "int8" `158 
f B "setup_psp" 1 279 "void(int8 mode)" `157 
f N "psp_output_full" 1 280 ""
f B "psp_output_full" 1 280 "int8()" `159 
f N "psp_input_full" 1 281 ""
f B "psp_input_full" 1 281 "int8()" `160 
f N "psp_overflow" 1 282 ""
f B "psp_overflow" 1 282 "int8()" `161  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 284 "0x10"
d G "PSP_DISABLED" 1 285 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
f N "setup_spi" 1 292 ""
v L "mode" 1 292 "int32" `164 
f B "setup_spi" 1 292 "void(int32 mode)" `163 
f N "spi_write" 1 293 ""
v L "value" 1 293 "int8" `166 
f B "spi_write" 1 293 "void(int8 value)" `165 
f N "spi_read" 1 294 ""
f B "spi_read" 1 294 "int8()" `167 
f N "spi_read" 1 295 ""
v L "value" 1 295 "int8" `169 
f B "spi_read" 1 295 "int8(int8 value)" `168 
f N "spi_data_is_in" 1 296 ""
f B "spi_data_is_in" 1 296 "int8()" `170  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 298 "0x00"
d G "SPI_MASTER" 1 299 "0x20"
d G "SPI_SLAVE" 1 300 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 301 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 302 "0x00"
d G "SPI_CLK_DIV_4" 1 303 "0x00"
d G "SPI_CLK_DIV_16" 1 304 "0x01"
d G "SPI_CLK_DIV_64" 1 305 "0x02"
d G "SPI_CLK_T2" 1 306 "0x03"
d G "SPI_SS_DISABLED" 1 307 "0x01"
d G "SPI_XMIT_L_TO_H" 1 309 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 310 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 312 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 313 "0x8000"
d G "SPI_L_TO_H" 1 316 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 317 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 1 2 "FUNCTION"
f N "setup_uart" 1 321 ""
v L "baud" 1 321 "int32" `172 
f B "setup_uart" 1 321 "void(int32 baud)" `171 
f N "setup_uart" 1 322 ""
v L "baud" 1 322 "int32" `174 
v L "stream" 1 322 "int8" `175 
f B "setup_uart" 1 322 "void(int32 baud,int8 stream)" `173 
f N "setup_uart" 1 323 ""
v L "baud" 1 323 "int32" `177 
v L "stream" 1 323 "int8" `178 
v L "clock" 1 323 "int32" `179 
f B "setup_uart" 1 323 "void(int32 baud,int8 stream,int32 clock)" `176 
f N "set_uart_speed" 1 324 ""
v L "baud" 1 324 "int32" `181 
f B "set_uart_speed" 1 324 "void(int32 baud)" `180 
f N "set_uart_speed" 1 325 ""
v L "baud" 1 325 "int32" `183 
v L "stream" 1 325 "int8" `184 
f B "set_uart_speed" 1 325 "void(int32 baud,int8 stream)" `182 
f N "set_uart_speed" 1 326 ""
v L "baud" 1 326 "int32" `186 
v L "stream" 1 326 "int8" `187 
v L "clock" 1 326 "int32" `188 
f B "set_uart_speed" 1 326 "void(int32 baud,int8 stream,int32 clock)" `185  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 330 "2"
d G "UART_DATA" 1 331 "4"
c L "set_uart_speed" 1 1 3 "FUNCTION"
f N "setup_comparator" 1 335 ""
v L "mode" 1 335 "int32" `190 
f B "setup_comparator" 1 335 "void(int32 mode)" `189  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 337 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 338 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 339 "0xbcf05"
d G "NC_NC_NC_NC" 1 340 "0x0ff07"
d G "A0_A3_A1_A2" 1 341 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 342 "0x9ef01"
d G "A0_VR_A1_VR" 1 343 "0x3ff06"
d G "A3_VR_A2_VR" 1 344 "0xcff0e"
d G "CP1_INVERT" 1 345 "0x0000010"
d G "CP2_INVERT" 1 346 "0x0000020"
c L "setup_comparator" 1 1 2 "FUNCTION"
f N "setup_vref" 1 353 ""
v L "mode" 1 353 "int8" `194 
f B "setup_vref" 1 353 "void(int8 mode)" `193  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 355 "0xa0"
d G "VREF_HIGH" 1 356 "0x80"
d G "VREF_A2" 1 358 "0x40"
c L "setup_vref" 1 1 4 "FUNCTION"
f N "setup_adc" 1 366 ""
v L "mode" 1 366 "int32" `196 
f B "setup_adc" 1 366 "void(int32 mode)" `195 
f N "read_adc" 1 367 ""
f B "read_adc" 1 367 "int8()" `197 
f N "read_adc" 1 368 ""
v L "mode" 1 368 "int8" `199 
f B "read_adc" 1 368 "int8(int8 mode)" `198 
f N "read_adc" 1 369 ""
f G "read_adc" 1 369 "int16()" `200 
f N "read_adc" 1 370 ""
v L "mode" 1 370 "int8" `201 
f G "read_adc" 1 370 "int16(int8 mode)" `200 
f N "adc_done" 1 371 ""
f B "adc_done" 1 371 "int8(int8 mode)" `200  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 373 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 374 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 375 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 376 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 377 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 378 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 379 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 380 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 383 ""
v L "setting" 1 383 "int8" `202 
f B "setup_adc_ports" 1 383 "void(int8 setting)" `201 
f N "set_analog_pins" 1 384 ""
v L "setting" 1 384 "int8" `204 
f B "set_analog_pins" 1 384 "void(int8 setting)" `203 
f N "set_adc_channel" 1 385 ""
v L "channel" 1 385 "int8" `206 
f B "set_adc_channel" 1 385 "void(int8 channel)" `205  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 387 "7" "None"
d G "ALL_ANALOG" 1 388 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 389 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 390 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 391 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 392 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 393 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 394 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 395 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 396 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 397 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 398 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 399 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 400 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 401 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 402 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 403 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 404 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 405 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 406 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 407 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 408 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 409 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 410 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 411 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 412 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 413 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 414 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 417 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 418 "1"
d G "ADC_READ_ONLY" 1 419 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 425 ""
v L "x" 1 425 "sint8" `208 
f B "abs" 1 425 "sint8(sint8 x)" `207 
f N "abs" 1 426 ""
v L "x" 1 426 "sint16" `210 
f B "abs" 1 426 "sint16(sint16 x)" `209 
f N "abs" 1 427 ""
v L "x" 1 427 "sint32" `212 
f B "abs" 1 427 "sint32(sint32 x)" `211 
f N "abs" 1 428 ""
v L "x" 1 428 "float" `214 
f B "abs" 1 428 "float(float x)" `213 
f N "_mul" 1 429 ""
v L "??65535" 1 429 "int8" `216 
v L "??65535" 1 429 "int8" `217 
f B "_mul" 1 429 "int16(int8 ,int8 )" `215 
f N "_mul" 1 430 ""
v L "??65535" 1 430 "sint8" `219 
v L "??65535" 1 430 "sint8" `220 
f B "_mul" 1 430 "sint16(sint8 ,sint8 )" `218 
f N "_mul" 1 431 ""
v L "??65535" 1 431 "int16" `222 
v L "??65535" 1 431 "int16" `223 
f B "_mul" 1 431 "int32(int16 ,int16 )" `221 
f N "_mul" 1 432 ""
v L "??65535" 1 432 "sint16" `225 
v L "??65535" 1 432 "sint16" `226 
f B "_mul" 1 432 "sint32(sint16 ,sint16 )" `224  "Memory Manipulation Prototypes:"
f N "read_bank" 1 435 ""
v L "bank" 1 435 "int8" `228 
v L "offset" 1 435 "int8" `229 
f B "read_bank" 1 435 "int8(int8 bank,int8 offset)" `227 
f N "write_bank" 1 436 ""
v L "bank" 1 436 "int8" `231 
v L "offset" 1 436 "int8" `232 
v L "value" 1 436 "int8" `233 
f B "write_bank" 1 436 "void(int8 bank,int8 offset,int8 value)" `230 
f N "strcpy" 1 437 ""
v L "dest" 1 437 "*int8" `235 
v L "src" 1 437 "*int8" `236 
f B "strcpy" 1 437 "void(*int8 dest,*int8 src)" `234 
f N "memset" 1 438 ""
v L "destination" 1 438 "*int8" `238 
v L "value" 1 438 "int8" `239 
v L "num" 1 438 "int16" `240 
f B "memset" 1 438 "void(*int8 destination,int8 value,int16 num)" `237 
f N "memcpy" 1 439 ""
v L "destination" 1 439 "*int8" `242 
v L "source" 1 439 "*int8" `243 
v L "num" 1 439 "int16" `244 
f B "memcpy" 1 439 "void(*int8 destination,*int8 source,int16 num)" `241  "String Prototypes:"
f N "toupper" 1 442 ""
v L "cvalue" 1 442 "int8" `246 
f B "toupper" 1 442 "int8(int8 cvalue)" `245 
f N "tolower" 1 443 ""
v L "cvalue" 1 443 "int8" `248 
f B "tolower" 1 443 "int8(int8 cvalue)" `247 
f N "sprintf" 1 444 ""
v L "string" 1 444 "*int8" `250 
v L "cstring" 1 444 "*int8" `251 
f B "sprintf" 1 444 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `249  "Data Manipulators Prototypes:"
f N "shift_left" 1 447 ""
v L "address" 1 447 "*int8" `254 
v L "bytes" 1 447 "int8" `255 
v L "value" 1 447 "int8" `256 
f B "shift_left" 1 447 "int8(*int8 address,int8 bytes,int8 value)" `253 
f N "shift_right" 1 448 ""
v L "address" 1 448 "*int8" `258 
v L "bytes" 1 448 "int8" `259 
v L "value" 1 448 "int8" `260 
f B "shift_right" 1 448 "int8(*int8 address,int8 bytes,int8 value)" `257 
f N "rotate_left" 1 449 ""
v L "address" 1 449 "*int8" `262 
v L "bytes" 1 449 "int8" `263 
f B "rotate_left" 1 449 "void(*int8 address,int8 bytes)" `261 
f N "rotate_right" 1 450 ""
v L "address" 1 450 "*int8" `265 
v L "bytes" 1 450 "int8" `266 
f B "rotate_right" 1 450 "void(*int8 address,int8 bytes)" `264 
f N "swap" 1 451 ""
v L "value" 1 451 "int8" `268 
f B "swap" 1 451 "void(int8 value)" `267 
f N "make8" 1 452 ""
v L "var" 1 452 "int16" `270 
v L "offset" 1 452 "int8" `271 
f B "make8" 1 452 "int8(int16 var,int8 offset)" `269 
f N "make8" 1 453 ""
v L "var" 1 453 "int32" `273 
v L "offset" 1 453 "int8" `274 
f B "make8" 1 453 "int8(int32 var,int8 offset)" `272 
f N "make16" 1 454 ""
v L "varhigh" 1 454 "int8" `276 
v L "varlow" 1 454 "int8" `277 
f B "make16" 1 454 "int16(int8 varhigh,int8 varlow)" `275 
f N "make32" 1 455 ""
v L "var1" 1 455 "int16" `279 
f B "make32" 1 455 "int32(int16 var1)" `278 
f N "make32" 1 456 ""
v L "var1" 1 456 "int16" `281 
v L "var2" 1 456 "int16" `282 
f B "make32" 1 456 "int32(int16 var1,int16 var2)" `280 
f N "make32" 1 457 ""
v L "var1" 1 457 "int16" `284 
v L "var2" 1 457 "int8" `285 
f B "make32" 1 457 "int32(int16 var1,int8 var2)" `283 
f N "make32" 1 458 ""
v L "var1" 1 458 "int16" `287 
v L "var2" 1 458 "int8" `288 
v L "var3" 1 458 "int8" `289 
f B "make32" 1 458 "int32(int16 var1,int8 var2,int8 var3)" `286 
f N "make32" 1 459 ""
v L "var1" 1 459 "int8" `291 
f B "make32" 1 459 "int32(int8 var1)" `290 
f N "make32" 1 460 ""
v L "var1" 1 460 "int8" `293 
v L "var2" 1 460 "int8" `294 
f B "make32" 1 460 "int32(int8 var1,int8 var2)" `292 
f N "make32" 1 461 ""
v L "var1" 1 461 "int8" `296 
v L "var2" 1 461 "int8" `297 
v L "var3" 1 461 "int8" `298 
f B "make32" 1 461 "int32(int8 var1,int8 var2,int8 var3)" `295 
f N "make32" 1 462 ""
v L "var1" 1 462 "int8" `300 
v L "var2" 1 462 "int8" `301 
v L "var3" 1 462 "int8" `302 
v L "var4" 1 462 "int8" `303 
f B "make32" 1 462 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `299 
f N "make32" 1 463 ""
v L "var1" 1 463 "int8" `305 
v L "var2" 1 463 "int16" `306 
f B "make32" 1 463 "int32(int8 var1,int16 var2)" `304 
f N "make32" 1 464 ""
v L "var1" 1 464 "int8" `308 
v L "var2" 1 464 "int16" `309 
v L "var3" 1 464 "int8" `310 
f B "make32" 1 464 "int32(int8 var1,int16 var2,int8 var3)" `307 
f N "make32" 1 465 ""
v L "var1" 1 465 "int8" `312 
v L "var2" 1 465 "int8" `313 
v L "var3" 1 465 "int16" `314 
f B "make32" 1 465 "int32(int8 var1,int8 var2,int16 var3)" `311 
f N "bit_set" 1 466 ""
v L "var" 1 466 "int8" `316 
v L "bit" 1 466 "int8" `317 
f B "bit_set" 1 466 "void(int8 var,int8 bit)" `315 
f N "bit_set" 1 467 ""
v L "var" 1 467 "int16" `319 
v L "bit" 1 467 "int8" `320 
f B "bit_set" 1 467 "void(int16 var,int8 bit)" `318 
f N "bit_set" 1 468 ""
v L "var" 1 468 "int32" `322 
v L "bit" 1 468 "int8" `323 
f B "bit_set" 1 468 "void(int32 var,int8 bit)" `321 
f N "bit_clear" 1 469 ""
v L "var" 1 469 "int8" `325 
v L "bit" 1 469 "int8" `326 
f B "bit_clear" 1 469 "void(int8 var,int8 bit)" `324 
f N "bit_clear" 1 470 ""
v L "var" 1 470 "int16" `328 
v L "bit" 1 470 "int8" `329 
f B "bit_clear" 1 470 "void(int16 var,int8 bit)" `327 
f N "bit_clear" 1 471 ""
v L "var" 1 471 "int32" `331 
v L "bit" 1 471 "int8" `332 
f B "bit_clear" 1 471 "void(int32 var,int8 bit)" `330 
f N "bit_test" 1 472 ""
v L "var" 1 472 "int8" `334 
v L "bit" 1 472 "int8" `335 
f B "bit_test" 1 472 "int8(int8 var,int8 bit)" `333 
f N "bit_test" 1 473 ""
v L "var" 1 473 "int16" `337 
v L "bit" 1 473 "int8" `338 
f B "bit_test" 1 473 "int8(int16 var,int8 bit)" `336 
f N "bit_test" 1 474 ""
v L "var" 1 474 "int32" `340 
v L "bit" 1 474 "int8" `341 
f B "bit_test" 1 474 "int8(int32 var,int8 bit)" `339  "#use delay() Prototypes:"
f N "delay_cycles" 1 477 ""
v L "count" 1 477 "int8" `343 
f B "delay_cycles" 1 477 "void(int8 count)" `342 
f N "delay_ms" 1 478 ""
v L "time" 1 478 "int16" `345 
f B "delay_ms" 1 478 "void(int16 time)" `344 
f N "delay_us" 1 479 ""
v L "time" 1 479 "int16" `347 
f B "delay_us" 1 479 "void(int16 time)" `346  "#use rs232() Prototypes:"
f N "putchar" 1 482 ""
v L "cdata" 1 482 "int8" `349 
f B "putchar" 1 482 "void(int8 cdata)" `348 
f N "putchar" 1 483 ""
v L "cdata" 1 483 "int8" `351 
v L "stream" 1 483 "int8" `352 
f B "putchar" 1 483 "void(int8 cdata,int8 stream)" `350 
f N "puts" 1 484 ""
v L "string" 1 484 "*int8" `354 
f B "puts" 1 484 "void(*int8 string)" `353 
f N "puts" 1 485 ""
v L "string" 1 485 "*int8" `356 
v L "stream" 1 485 "int8" `357 
f B "puts" 1 485 "void(*int8 string,int8 stream)" `355 
f N "getch" 1 486 ""
f B "getch" 1 486 "int8()" `358 
f N "getch" 1 487 ""
v L "stream" 1 487 "int8" `360 
f B "getch" 1 487 "int8(int8 stream)" `359 
f N "gets" 1 488 ""
v L "string" 1 488 "*int8" `362 
f B "gets" 1 488 "void(*int8 string)" `361 
f N "gets" 1 489 ""
v L "string" 1 489 "*int8" `364 
v L "stream" 1 489 "int8" `365 
f B "gets" 1 489 "void(*int8 string,int8 stream)" `363 
f N "kbhit" 1 490 ""
f B "kbhit" 1 490 "int8()" `366 
f N "kbhit" 1 491 ""
v L "stream" 1 491 "int8" `368 
f B "kbhit" 1 491 "int8(int8 stream)" `367 
f N "printf" 1 492 ""
v L "string" 1 492 "*int8" `370 
f B "printf" 1 492 "void(*int8 string,*int8 _VA_LIST)" `369 
f N "fprintf" 1 493 ""
v L "stream" 1 493 "int8" `373 
v L "string" 1 493 "*int8" `374 
f B "fprintf" 1 493 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `372 
f N "putc_send" 1 494 ""
f B "putc_send" 1 494 "void()" `376 
f N "fputc_send" 1 495 ""
v L "stream" 1 495 "int8" `378 
f B "fputc_send" 1 495 "void(int8 stream)" `377 
f N "rcv_buffer_full" 1 496 ""
f B "rcv_buffer_full" 1 496 "int8()" `379 
f N "rcv_buffer_full" 1 497 ""
v L "stream" 1 497 "int8" `381 
f B "rcv_buffer_full" 1 497 "int8(int8 stream)" `380 
f N "rcv_buffer_bytes" 1 498 ""
f B "rcv_buffer_bytes" 1 498 "int16()" `382 
f N "rcv_buffer_bytes" 1 499 ""
v L "stream" 1 499 "int8" `384 
f B "rcv_buffer_bytes" 1 499 "int16(int8 stream)" `383 
f N "tx_buffer_full" 1 500 ""
f B "tx_buffer_full" 1 500 "int8()" `385 
f N "tx_buffer_full" 1 501 ""
v L "stream" 1 501 "int8" `387 
f B "tx_buffer_full" 1 501 "int8(int8 stream)" `386 
f N "tx_buffer_bytes" 1 502 ""
f B "tx_buffer_bytes" 1 502 "int16()" `388 
f N "tx_buffer_bytes" 1 503 ""
v L "stream" 1 503 "int8" `390 
f B "tx_buffer_bytes" 1 503 "int16(int8 stream)" `389  "#use i2c() Prototypes:"
f N "i2c_read" 1 506 ""
f B "i2c_read" 1 506 "int8()" `391 
f N "i2c_read" 1 507 ""
v L "ack" 1 507 "int8" `393 
f B "i2c_read" 1 507 "int8(int8 ack)" `392 
f N "i2c_read" 1 508 ""
v L "stream" 1 508 "int8" `395 
v L "ack" 1 508 "int8" `396 
f B "i2c_read" 1 508 "int8(int8 stream,int8 ack)" `394 
f N "i2c_write" 1 509 ""
v L "data" 1 509 "int8" `398 
f B "i2c_write" 1 509 "int8(int8 data)" `397 
f N "i2c_write" 1 510 ""
v L "stream" 1 510 "int8" `400 
v L "data" 1 510 "int8" `401 
f B "i2c_write" 1 510 "int8(int8 stream,int8 data)" `399 
f N "i2c_start" 1 511 ""
f B "i2c_start" 1 511 "void()" `402 
f N "i2c_start" 1 512 ""
v L "stream" 1 512 "int8" `404 
f B "i2c_start" 1 512 "void(int8 stream)" `403 
f N "i2c_start" 1 513 ""
v L "stream" 1 513 "int8" `406 
v L "restart" 1 513 "int8" `407 
f B "i2c_start" 1 513 "void(int8 stream,int8 restart)" `405 
f N "i2c_stop" 1 514 ""
f B "i2c_stop" 1 514 "void()" `408 
f N "i2c_stop" 1 515 ""
v L "stream" 1 515 "int8" `410 
f B "i2c_stop" 1 515 "void(int8 stream)" `409 
f N "i2c_isr_state" 1 516 ""
f B "i2c_isr_state" 1 516 "int8()" `411 
f N "i2c_slaveaddr" 1 517 ""
v L "addr" 1 517 "int8" `413 
f B "i2c_slaveaddr" 1 517 "void(int8 addr)" `412 
f N "i2c_slaveaddr" 1 518 ""
v L "stream" 1 518 "int8" `415 
v L "addr" 1 518 "int8" `416 
f B "i2c_slaveaddr" 1 518 "void(int8 stream,int8 addr)" `414 
f N "i2c_poll" 1 519 ""
f B "i2c_poll" 1 519 "int8()" `417 
f N "i2c_poll" 1 520 ""
v L "stream" 1 520 "int8" `419 
f B "i2c_poll" 1 520 "int8(int8 stream)" `418 
f N "i2c_init" 1 521 ""
v L "baud" 1 521 "int32" `421 
f B "i2c_init" 1 521 "void(int32 baud)" `420 
f N "i2c_init" 1 522 ""
v L "stream" 1 522 "int8" `423 
v L "baud" 1 522 "int32" `424 
f B "i2c_init" 1 522 "void(int8 stream,int32 baud)" `422 
f N "i2c_transfer" 1 523 ""
v L "address" 1 523 "int8" `426 
v L "wData" 1 523 "*int8" `427 
v L "wCount" 1 523 "int8" `428 
f B "i2c_transfer" 1 523 "void(int8 address,*int8 wData,int8 wCount)" `425 
f N "i2c_transfer" 1 524 ""
v L "address" 1 524 "int8" `430 
v L "wData" 1 524 "*int8" `431 
v L "wCount" 1 524 "int8" `432 
v L "rData" 1 524 "*int8" `433 
v L "rCount" 1 524 "*int8" `434 
f B "i2c_transfer" 1 524 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `429 
f N "i2c_transfer" 1 525 ""
v L "stream" 1 525 "int8" `436 
v L "address" 1 525 "int8" `437 
v L "wData" 1 525 "*int8" `438 
v L "wCount" 1 525 "int8" `439 
f B "i2c_transfer" 1 525 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `435 
f N "i2c_transfer" 1 526 ""
v L "stream" 1 526 "int8" `441 
v L "address" 1 526 "int8" `442 
v L "wData" 1 526 "*int8" `443 
v L "wCount" 1 526 "int8" `444 
v L "rData" 1 526 "*int8" `445 
v L "rCount" 1 526 "*int8" `446 
f B "i2c_transfer" 1 526 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `440 
f N "i2c_transfer_out" 1 527 ""
v L "address" 1 527 "int8" `448 
v L "wData" 1 527 "*int8" `449 
v L "wCount" 1 527 "int8" `450 
f B "i2c_transfer_out" 1 527 "void(int8 address,*int8 wData,int8 wCount)" `447 
f N "i2c_transfer_out" 1 528 ""
v L "stream" 1 528 "int8" `452 
v L "address" 1 528 "int8" `453 
v L "wData" 1 528 "*int8" `454 
v L "wCount" 1 528 "int8" `455 
f B "i2c_transfer_out" 1 528 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `451 
f N "i2c_transfer_in" 1 529 ""
v L "address" 1 529 "int8" `457 
v L "rData" 1 529 "*int8" `458 
v L "rCount" 1 529 "int8" `459 
f B "i2c_transfer_in" 1 529 "void(int8 address,*int8 rData,int8 rCount)" `456 
f N "i2c_transfer_in" 1 530 ""
v L "stream" 1 530 "int8" `461 
v L "address" 1 530 "int8" `462 
v L "rData" 1 530 "*int8" `463 
v L "rCount" 1 530 "int8" `464 
f B "i2c_transfer_in" 1 530 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `460  "#use spi() Prototypes:"
f N "spi_xfer" 1 533 ""
f B "spi_xfer" 1 533 "int8()" `465 
f N "spi_xfer" 1 534 ""
f G "spi_xfer" 1 534 "int16()" `466 
f N "spi_xfer" 1 535 ""
f G "spi_xfer" 1 535 "int32()" `466 
f N "spi_xfer" 1 536 ""
v L "data" 1 536 "int8" `467 
f B "spi_xfer" 1 536 "int8(int8 data)" `466 
f N "spi_xfer" 1 537 ""
v L "data" 1 537 "int16" `469 
f B "spi_xfer" 1 537 "int16(int16 data)" `468 
f N "spi_xfer" 1 538 ""
v L "data" 1 538 "int32" `471 
f B "spi_xfer" 1 538 "int32(int32 data)" `470 
f N "spi_xfer" 1 539 ""
v L "stream" 1 539 "int8" `473 
v L "data" 1 539 "int8" `474 
f B "spi_xfer" 1 539 "int8(int8 stream,int8 data)" `472 
f N "spi_xfer" 1 540 ""
v L "stream" 1 540 "int8" `476 
v L "data" 1 540 "int16" `477 
f B "spi_xfer" 1 540 "int16(int8 stream,int16 data)" `475 
f N "spi_xfer" 1 541 ""
v L "stream" 1 541 "int8" `479 
v L "data" 1 541 "int32" `480 
f B "spi_xfer" 1 541 "int32(int8 stream,int32 data)" `478 
f N "spi_xfer" 1 542 ""
v L "stream" 1 542 "int8" `482 
v L "data" 1 542 "int8" `483 
v L "bits" 1 542 "int8" `484 
f B "spi_xfer" 1 542 "int8(int8 stream,int8 data,int8 bits)" `481 
f N "spi_xfer" 1 543 ""
v L "stream" 1 543 "int8" `486 
v L "data" 1 543 "int16" `487 
v L "bits" 1 543 "int8" `488 
f B "spi_xfer" 1 543 "int16(int8 stream,int16 data,int8 bits)" `485 
f N "spi_xfer" 1 544 ""
v L "stream" 1 544 "int8" `490 
v L "data" 1 544 "int32" `491 
v L "bits" 1 544 "int8" `492 
f B "spi_xfer" 1 544 "int32(int8 stream,int32 data,int8 bits)" `489 
f N "spi_init" 1 545 ""
v L "baud" 1 545 "int32" `494 
f B "spi_init" 1 545 "void(int32 baud)" `493 
f N "spi_init" 1 546 ""
v L "stream" 1 546 "int8" `496 
v L "baud" 1 546 "int32" `497 
f B "spi_init" 1 546 "void(int8 stream,int32 baud)" `495 
f N "spi_speed" 1 547 ""
v L "baud" 1 547 "int32" `499 
f B "spi_speed" 1 547 "void(int32 baud)" `498 
f N "spi_speed" 1 548 ""
v L "stream" 1 548 "int8" `501 
v L "baud" 1 548 "int32" `502 
f B "spi_speed" 1 548 "void(int8 stream,int32 baud)" `500 
f N "spi_speed" 1 549 ""
v L "stream" 1 549 "int8" `504 
v L "baud" 1 549 "int32" `505 
v L "clock" 1 549 "int32" `506 
f B "spi_speed" 1 549 "void(int8 stream,int32 baud,int32 clock)" `503 
f N "spi_prewrite" 1 550 ""
v L "data" 1 550 "int8" `508 
f B "spi_prewrite" 1 550 "void(int8 data)" `507 
f N "spi_prewrite" 1 551 ""
v L "data" 1 551 "int16" `510 
f B "spi_prewrite" 1 551 "void(int16 data)" `509 
f N "spi_prewrite" 1 552 ""
v L "data" 1 552 "int32" `512 
f B "spi_prewrite" 1 552 "void(int32 data)" `511 
f N "spi_prewrite" 1 553 ""
v L "??65535" 1 553 "int8" `514 
v L "data" 1 553 "int8" `515 
f B "spi_prewrite" 1 553 "void(int8 ,int8 data)" `513 
f N "spi_prewrite" 1 554 ""
v L "??65535" 1 554 "int8" `517 
v L "data" 1 554 "int16" `518 
f B "spi_prewrite" 1 554 "void(int8 ,int16 data)" `516 
f N "spi_prewrite" 1 555 ""
v L "??65535" 1 555 "int8" `520 
v L "data" 1 555 "int32" `521 
f B "spi_prewrite" 1 555 "void(int8 ,int32 data)" `519 
f N "spi_xfer_in" 1 556 ""
f B "spi_xfer_in" 1 556 "int8()" `522 
f N "spi_xfer_in" 1 557 ""
f G "spi_xfer_in" 1 557 "int16()" `523 
f N "spi_xfer_in" 1 558 ""
f G "spi_xfer_in" 1 558 "int32()" `523 
f N "spi_xfer_in" 1 559 ""
v L "bits" 1 559 "int8" `524 
f B "spi_xfer_in" 1 559 "int8(int8 bits)" `523 
f N "spi_xfer_in" 1 560 ""
v L "bits" 1 560 "int8" `526 
f G "spi_xfer_in" 1 560 "int16(int8 bits)" `525 
f N "spi_xfer_in" 1 561 ""
v L "bits" 1 561 "int8" `526 
f G "spi_xfer_in" 1 561 "int32(int8 bits)" `525 
f N "spi_xfer_in" 1 562 ""
v L "stream" 1 562 "int8" `526 
v L "bits" 1 562 "int8" `527 
f B "spi_xfer_in" 1 562 "int8(int8 stream,int8 bits)" `525 
f N "spi_xfer_in" 1 563 ""
v L "stream" 1 563 "int8" `526 
v L "bits" 1 563 "int8" `530 
f G "spi_xfer_in" 1 563 "int16(int8 stream,int8 bits)" `528 
f N "spi_xfer_in" 1 564 ""
v L "stream" 1 564 "int8" `526 
v L "bits" 1 564 "int8" `530 
f G "spi_xfer_in" 1 564 "int32(int8 stream,int8 bits)" `528  "#use rtos() Prototypes:"
f N "rtos_run" 1 567 ""
f B "rtos_run" 1 567 "void(int8 stream,int8 bits)" `528 
f N "rtos_yield" 1 568 ""
f B "rtos_yield" 1 568 "void(int8 bits)" `529 
f N "rtos_enable" 1 569 ""
v L "task" 1 569 "int8" `531 
f B "rtos_enable" 1 569 "void(int8 task)" `530 
f N "rtos_disable" 1 570 ""
v L "task" 1 570 "int8" `533 
f B "rtos_disable" 1 570 "void(int8 task)" `532 
f N "rtos_terminate" 1 571 ""
f B "rtos_terminate" 1 571 "void()" `534 
f N "rtos_await" 1 572 ""
v L "flag" 1 572 "int8" `536 
f B "rtos_await" 1 572 "void(int8 flag)" `535 
f N "rtos_wait" 1 573 ""
v L "sem" 1 573 "int8" `538 
f B "rtos_wait" 1 573 "void(int8 sem)" `537 
f N "rtos_signal" 1 574 ""
v L "sem" 1 574 "int8" `540 
f B "rtos_signal" 1 574 "void(int8 sem)" `539 
f N "rtos_msg_send" 1 575 ""
v L "task" 1 575 "int8" `542 
v L "msg" 1 575 "int8" `543 
f B "rtos_msg_send" 1 575 "void(int8 task,int8 msg)" `541 
f N "rtos_msg_read" 1 576 ""
f B "rtos_msg_read" 1 576 "int8()" `544 
f N "rtos_msg_poll" 1 577 ""
f B "rtos_msg_poll" 1 577 "int8()" `545 
f N "rtos_overrun" 1 578 ""
v L "task" 1 578 "int8" `547 
f B "rtos_overrun" 1 578 "int8(int8 task)" `546 
f N "rtos_stats" 1 579 ""
v L "task" 1 579 "int8" `549 
v L "stat" 1 579 "*int8" `550 
f B "rtos_stats" 1 579 "void(int8 task,*int8 stat)" `548  "#use timer() Prototypes:"
f N "get_ticks" 1 582 ""
f B "get_ticks" 1 582 "int8()" `551 
f N "get_ticks" 1 583 ""
f G "get_ticks" 1 583 "int16()" `552 
f N "get_ticks" 1 584 ""
f G "get_ticks" 1 584 "int32()" `552 
f N "get_ticks" 1 585 ""
v L "stream" 1 585 "int8" `553 
f B "get_ticks" 1 585 "int8(int8 stream)" `552 
f N "get_ticks" 1 586 ""
v L "stream" 1 586 "int8" `555 
f G "get_ticks" 1 586 "int16(int8 stream)" `554 
f N "get_ticks" 1 587 ""
v L "stream" 1 587 "int8" `555 
f G "get_ticks" 1 587 "int32(int8 stream)" `554 
f N "set_ticks" 1 588 ""
v L "value" 1 588 "int8" `555 
f B "set_ticks" 1 588 "void(int8 value)" `554 
f N "set_ticks" 1 589 ""
v L "value" 1 589 "int16" `557 
f B "set_ticks" 1 589 "void(int16 value)" `556 
f N "set_ticks" 1 590 ""
v L "value" 1 590 "int32" `559 
f B "set_ticks" 1 590 "void(int32 value)" `558 
f N "set_ticks" 1 591 ""
v L "stream" 1 591 "int8" `561 
v L "value" 1 591 "int8" `562 
f B "set_ticks" 1 591 "void(int8 stream,int8 value)" `560 
f N "set_ticks" 1 592 ""
v L "stream" 1 592 "int8" `564 
v L "value" 1 592 "int16" `565 
f B "set_ticks" 1 592 "void(int8 stream,int16 value)" `563 
f N "set_ticks" 1 593 ""
v L "stream" 1 593 "int8" `567 
v L "value" 1 593 "int32" `568 
f B "set_ticks" 1 593 "void(int8 stream,int32 value)" `566  "#use pwm() Prototypes:"
f N "pwm_on" 1 596 ""
f B "pwm_on" 1 596 "void()" `569 
f N "pwm_on" 1 597 ""
v L "stream" 1 597 "int8" `571 
f B "pwm_on" 1 597 "void(int8 stream)" `570 
f N "pwm_off" 1 598 ""
f B "pwm_off" 1 598 "void()" `572 
f N "pwm_off" 1 599 ""
v L "stream" 1 599 "int8" `574 
f B "pwm_off" 1 599 "void(int8 stream)" `573 
f N "pwm_set_duty" 1 600 ""
v L "duty" 1 600 "int16" `576 
f B "pwm_set_duty" 1 600 "void(int16 duty)" `575 
f N "pwm_set_duty" 1 601 ""
v L "stream" 1 601 "int8" `578 
v L "duty" 1 601 "int16" `579 
f B "pwm_set_duty" 1 601 "void(int8 stream,int16 duty)" `577 
f N "pwm_set_duty_percent" 1 602 ""
v L "percent" 1 602 "int16" `581 
f B "pwm_set_duty_percent" 1 602 "void(int16 percent)" `580 
f N "pwm_set_duty_percent" 1 603 ""
v L "stream" 1 603 "int8" `583 
v L "percent" 1 603 "int16" `584 
f B "pwm_set_duty_percent" 1 603 "void(int8 stream,int16 percent)" `582 
f N "pwm_set_frequency" 1 604 ""
v L "frequency" 1 604 "int32" `586 
f B "pwm_set_frequency" 1 604 "void(int32 frequency)" `585 
f N "pwm_set_frequency" 1 605 ""
v L "stream" 1 605 "int8" `588 
v L "frequency" 1 605 "int32" `589 
f B "pwm_set_frequency" 1 605 "void(int8 stream,int32 frequency)" `587  "#use capture() Prototypes:"
f N "get_capture_time" 1 608 ""
f B "get_capture_time" 1 608 "int16()" `590 
f N "get_capture_time" 1 609 ""
v L "stream" 1 609 "int8" `592 
f B "get_capture_time" 1 609 "int16(int8 stream)" `591 
f N "get_capture_event" 1 610 ""
f B "get_capture_event" 1 610 "int8()" `593 
f N "get_capture_event" 1 611 ""
v L "stream" 1 611 "int8" `595 
f B "get_capture_event" 1 611 "int8(int8 stream)" `594  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 624 ""
v L "address" 1 624 "int16" `597 
f B "goto_address" 1 624 "void(int16 address)" `596 
f N "label_address" 1 625 ""
v L "label" 1 625 "int16" `599 
f B "label_address" 1 625 "int16(int16 label)" `598  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 628 ""
v L "address" 1 628 "int16" `601 
v L "dataptr" 1 628 "*int8" `602 
v L "count" 1 628 "int16" `603 
f B "read_program_memory" 1 628 "void(int16 address,*int8 dataptr,int16 count)" `600 
f N "read_program_eeprom" 1 629 ""
v L "address" 1 629 "int16" `605 
f B "read_program_eeprom" 1 629 "int16(int16 address)" `604  "Program Memory Write Prototypes:"
f N "write_program_memory" 1 632 ""
v L "address" 1 632 "int16" `607 
v L "dataptr" 1 632 "*int8" `608 
v L "count" 1 632 "int16" `609 
f B "write_program_memory" 1 632 "void(int16 address,*int8 dataptr,int16 count)" `606 
f N "write_program_eeprom" 1 633 ""
v L "address" 1 633 "int16" `611 
v L "data" 1 633 "int16" `612 
f B "write_program_eeprom" 1 633 "void(int16 address,int16 data)" `610  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 640 "unsigned int8"
f N "read_eeprom" 1 643 ""
v L "address" 1 643 "int8" `614 
f B "read_eeprom" 1 643 "int8(int8 address)" `613 
f N "write_eeprom" 1 644 ""
v L "address" 1 644 "int8" `616 
v L "value" 1 644 "int8" `617 
f B "write_eeprom" 1 644 "void(int8 address,int8 value)" `615  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 651 ""
v L "interrupt" 1 651 "int32" `619 
f B "enable_interrupts" 1 651 "void(int32 interrupt)" `618 
f N "disable_interrupts" 1 652 ""
v L "interrupt" 1 652 "int32" `621 
f B "disable_interrupts" 1 652 "void(int32 interrupt)" `620 
f N "clear_interrupt" 1 653 ""
v L "interrupt" 1 653 "int32" `623 
f B "clear_interrupt" 1 653 "void(int32 interrupt)" `622 
f N "interrupt_active" 1 654 ""
v L "interrupt" 1 654 "int32" `625 
f B "interrupt_active" 1 654 "int8(int32 interrupt)" `624 
f N "interrupt_enabled" 1 655 ""
v L "interrupt" 1 655 "int32" `627 
f B "interrupt_enabled" 1 655 "int8(int32 interrupt)" `626 
f N "ext_int_edge" 1 656 ""
v L "source" 1 656 "int8" `629 
v L "edge" 1 656 "int8" `630 
f B "ext_int_edge" 1 656 "void(int8 source,int8 edge)" `628 
f N "jump_to_isr" 1 657 ""
v L "address" 1 657 "int16" `632 
f B "jump_to_isr" 1 657 "void(int16 address)" `631  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 659 "0x40"
d G "H_TO_L" 1 660 "0"
d G "GLOBAL" 1 662 "0x0BC0"
d G "PERIPH" 1 663 "0x0B40"
d G "INT_RTCC" 1 664 "0x000B20"
d G "INT_RB" 1 665 "0x00FF0B08"
d G "INT_EXT_L2H" 1 666 "0x50000B10"
d G "INT_EXT_H2L" 1 667 "0x60000B10"
d G "INT_EXT" 1 668 "0x000B10"
d G "INT_AD" 1 669 "0x008C40"
d G "INT_TBE" 1 670 "0x008C10"
d G "INT_RDA" 1 671 "0x008C20"
d G "INT_TIMER1" 1 672 "0x008C01"
d G "INT_TIMER2" 1 673 "0x008C02"
d G "INT_CCP1" 1 674 "0x008C04"
d G "INT_CCP2" 1 675 "0x008D01"
d G "INT_SSP" 1 676 "0x008C08"
d G "INT_PSP" 1 677 "0x008C80"
d G "INT_BUSCOL" 1 678 "0x008D08"
d G "INT_EEPROM" 1 679 "0x008D10"
d G "INT_TIMER0" 1 680 "0x000B20"
d G "INT_COMP" 1 681 "0x008D40"
D G "LCD_RS_PIN" 0 16 "PIN_D0"
D G "LCD_RW_PIN" 0 17 "PIN_D1"
D G "LCD_ENABLE_PIN" 0 18 "PIN_D2"
D G "LCD_DATA4" 0 19 "PIN_D4"
D G "LCD_DATA5" 0 20 "PIN_D5"
D G "LCD_DATA6" 0 21 "PIN_D6"
D G "LCD_DATA7" 0 22 "PIN_D7"
D G "CS" 0 25 "PIN_A5"
D G "__LCD_C__" 2 76 ""
C L "jump_to_isr" 2 2 2 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `648  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 2 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 2 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 2 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 2 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 2 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 2 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 2 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 2 187 "20"
F N "lcd_read_nibble" 2 190 ""
f G "lcd_read_nibble" 2 190 "int8()" `649 
F N "lcd_read_byte" 2 192 ""
F G "lcd_read_byte" 2 193 "int8()" `650 
V L "low" 2 194 "int8" `651 
V L "high" 2 194 "int8" `652 
F N "lcd_read_nibble" 2 239 ""
F G "lcd_read_nibble" 2 240 "int8()" `649 
V L "n" 2 242 "int8" `653 
C L "lcd_read_nibble" 2 2 1 "FUNCTION"
F N "lcd_send_nibble" 2 256 ""
V L "n" 2 256 "int8" `655 
F G "lcd_send_nibble" 2 257 "void(int8 n)" `654 
C L "lcd_send_nibble" 2 2 1 "FUNCTION"
F N "lcd_send_byte" 2 274 ""
V L "address" 2 274 "int8" `657 
V L "n" 2 274 "int8" `658 
F G "lcd_send_byte" 2 275 "void(int8 address,int8 n)" `656 
F N "lcd_init" 2 299 ""
F G "lcd_init" 2 300 "void()" `659 
V L "i" 2 301 "int8" `660 
V L "LCD_INIT_STRING" 2 302 "int8[4]" `661 
C L "lcd_init" 2 2 2 "FUNCTION"
F N "lcd_gotoxy" 2 345 ""
V L "x" 2 345 "int8" `663 
V L "y" 2 345 "int8" `664 
F G "lcd_gotoxy" 2 346 "void(int8 x,int8 y)" `662 
V L "address" 2 347 "int8" `665 
F N "lcd_putc" 2 363 ""
V L "c" 2 363 "int8" `667 
F G "lcd_putc" 2 364 "void(int8 c)" `666 
F N "lcd_getc" 2 406 ""
V L "x" 2 406 "int8" `669 
V L "y" 2 406 "int8" `670 
F G "lcd_getc" 2 407 "int8(int8 x,int8 y)" `668 
V L "value" 2 408 "int8" `671 
C L "lcd_getc" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 2 424 ""
V L "which" 2 424 "int8" `673 
V L "ptr" 2 424 "*int8" `674 
F G "lcd_set_cgram_char" 2 425 "void(int8 which,*int8 ptr)" `672 
V L "i" 2 426 "int8" `675 
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
F N "lcd_cursor_on" 2 443 ""
V L "on" 2 443 "int8" `677 
F G "lcd_cursor_on" 2 444 "void(int8 on)" `676 
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
D G "_STDIO" 3 12 ""
D G "_STRING" 4 12 ""
D G "_STDDEF" 5 13 ""
D G "ptrdiff_t" 5 18 "unsigned int16"
D G "size_t" 5 22 "unsigned int8"
D G "wchar_t" 5 26 "char"
D G "NULL" 5 27 "0"
D G "offsetof" 5 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
F N "memmove" 4 34 ""
V L "s1" 4 34 "*void" `679 
V L "s2" 4 34 "*void" `680 
V L "n" 4 34 "int8" `681 
F G "memmove" 4 35 "*int8(*void s1,*void s2,int8 n)" `678 
V L "sc1" 4 36 "*int8" `682 
V L "sc2" 4 37 "*int8" `683 
D G "strcopy" 4 54 "strcpy"
F N "strncpy" 4 61 ""
V L "s1" 4 61 "*int8" `685 
V L "s2" 4 61 "*int8" `686 
V L "n" 4 61 "int8" `687 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int8 n)" `684 
V L "s" 4 63 "*int8" `688 
F N "strcat" 4 78 ""
V L "s1" 4 78 "*int8" `690 
V L "s2" 4 78 "*int8" `691 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2)" `689 
V L "s" 4 80 "*int8" `692 
F N "strncat" 4 96 ""
V L "s1" 4 96 "*int8" `694 
V L "s2" 4 96 "*int8" `695 
V L "n" 4 96 "int8" `696 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int8 n)" `693 
V L "s" 4 98 "*int8" `697 
C L "memcmp" 4 19 3 "FUNCTION"
F N "memcmp" 4 120 ""
V L "s1" 4 120 "*void" `699 
V L "s2" 4 120 "*void" `700 
V L "n" 4 120 "int8" `701 
F G "memcmp" 4 121 "sint8(*void s1,*void s2,int8 n)" `698 
V L "su1" 4 122 "*int8" `702 
V L "su2" 4 122 "*int8" `703 
C L "strcmp" 4 19 2 "FUNCTION"
F N "strcmp" 4 134 ""
V L "s1" 4 134 "*int8" `705 
V L "s2" 4 134 "*int8" `706 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2)" `704 
C L "strcoll" 4 19 2 "FUNCTION"
F N "strcoll" 4 144 ""
V L "s1" 4 144 "*int8" `708 
V L "s2" 4 144 "*int8" `709 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2)" `707 
C L "strncmp" 4 19 4 "FUNCTION"
F N "strncmp" 4 157 ""
V L "s1" 4 157 "*int8" `711 
V L "s2" 4 157 "*int8" `712 
V L "n" 4 157 "int8" `713 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int8 n)" `710 
C L "strxfrm" 4 19 4 "FUNCTION"
F N "strxfrm" 4 170 ""
V L "s1" 4 170 "*int8" `715 
V L "s2" 4 170 "*int8" `716 
V L "n" 4 170 "int8" `717 
F G "strxfrm" 4 171 "int8(*int8 s1,*int8 s2,int8 n)" `714 
V L "c" 4 172 "int8" `718 
V L "n1" 4 173 "int8" `719 
C L "strxfrm" 4 19 1 "FUNCTION"
F N "memchr" 4 201 ""
V L "s" 4 201 "*void" `721 
V L "c" 4 201 "int8" `722 
V L "n" 4 201 "int8" `723 
F G "memchr" 4 202 "*int8(*void s,int8 c,int8 n)" `720 
V L "uc" 4 203 "int8" `724 
V L "su" 4 204 "*int8" `725 
F N "strchr" 4 215 ""
V L "s" 4 215 "*int8" `727 
V L "c" 4 215 "int8" `728 
F G "strchr" 4 216 "*int8(*int8 s,int8 c)" `726 
C L "strcspn" 4 19 4 "FUNCTION"
F N "strcspn" 4 227 ""
V L "s1" 4 227 "*int8" `730 
V L "s2" 4 227 "*int8" `731 
F G "strcspn" 4 228 "int8(*int8 s1,*int8 s2)" `729 
V L "sc1" 4 229 "*int8" `732 
V L "sc2" 4 229 "*int8" `733 
F N "strpbrk" 4 242 ""
V L "s1" 4 242 "*int8" `735 
V L "s2" 4 242 "*int8" `736 
F G "strpbrk" 4 243 "*int8(*int8 s1,*int8 s2)" `734 
V L "sc1" 4 244 "*int8" `737 
V L "sc2" 4 244 "*int8" `738 
F N "strrchr" 4 257 ""
V L "s" 4 257 "*int8" `740 
V L "c" 4 257 "int8" `741 
F G "strrchr" 4 258 "*int8(*int8 s,int8 c)" `739 
V L "p" 4 259 "*int8" `742 
C L "strspn" 4 19 2 "FUNCTION"
F N "strspn" 4 272 ""
V L "s1" 4 272 "*int8" `744 
V L "s2" 4 272 "*int8" `745 
F G "strspn" 4 273 "int8(*int8 s1,*int8 s2)" `743 
V L "sc1" 4 274 "*int8" `746 
V L "sc2" 4 274 "*int8" `747 
F N "strstr" 4 291 ""
V L "s1" 4 291 "*int8" `749 
V L "s2" 4 291 "*int8" `750 
F G "strstr" 4 292 "*int8(*int8 s1,*int8 s2)" `748 
V L "s" 4 293 "*int8" `751 
V L "t" 4 293 "*int8" `752 
C L "strlen" 4 19 2 "FUNCTION"
F N "strlen" 4 318 ""
V L "s" 4 318 "*int8" `754 
F G "strlen" 4 319 "int8(*int8 s)" `753 
V L "sc" 4 320 "*int8" `755 
F N "strtok" 4 341 ""
V L "s1" 4 341 "*int8" `757 
V L "s2" 4 341 "*int8" `758 
F G "strtok" 4 342 "*int8(*int8 s1,*int8 s2)" `756 
V L "beg" 4 343 "*int8" `759 
V L "end" 4 343 "*int8" `760 
V L "save" 4 344 "*int8" `761 
C L "stricmp" 4 19 6 "FUNCTION"
F N "stricmp" 4 392 ""
V L "s1" 4 392 "*int8" `763 
V L "s2" 4 392 "*int8" `764 
F G "stricmp" 4 393 "sint8(*int8 s1,*int8 s2)" `762 
F N "strlwr" 4 406 ""
V L "s" 4 406 "*int8" `768 
F G "strlwr" 4 407 "*int8(*int8 s)" `767 
V L "p" 4 408 "*int8" `769 
F N "strupr" 4 420 ""
V L "s" 4 420 "*int8" `771 
F G "strupr" 4 421 "*int8(*int8 s)" `770 
V L "p" 4 422 "*int8" `772 
D G "_STDLIB" 7 13 ""
D G "RAND_MAX" 7 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 7 26 "1"
T G "div_t" 7 34 "{sint8 quot,sint8 rem}" `776 
T G "ldiv_t" 7 39 "{sint16 quot,sint16 rem}" `780  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 5 3 6 "FUNCTION"
C L "atoi" 7 44 2 "FUNCTION"
C L "atoi" 7 47 1 "*"
C L "atoi" 7 47 1 "*"
F N "atoi" 7 51 ""
V L "s" 7 51 "*int8" `782 
f G "atoi" 7 51 "sint8(*int8 s)" `781  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 7 59 ""
V L "s" 7 59 "*int8" `784 
f G "atoi32" 7 59 "sint32(*int8 s)" `783  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 7 47 2 "FUNCTION"
F N "itoa" 7 80 ""
V L "num" 7 80 "sint32" `786 
V L "base" 7 80 "int8" `787 
V L "s" 7 80 "*int8" `788 
f G "itoa" 7 80 "*int8(sint32 num,int8 base,*int8 s)" `785  "Standard template: signed int16  atol(char * s)"
C L "itoa" 7 82 1 "*"
C L "itoa" 7 82 1 "*"
F N "atol" 7 86 ""
V L "s" 7 86 "*int8" `790 
f G "atol" 7 86 "sint16(*int8 s)" `789  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 7 88 1 "*"
C L "atol" 7 88 1 "*"
C L "atol" 7 88 1 "*"
C L "atol" 7 88 1 "*"
F N "strtol" 7 94 ""
V L "s" 7 94 "*int8" `792 
V L "endptr" 7 94 "*int8" `793 
V L "base" 7 94 "sint8" `794 
f G "strtol" 7 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `791  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 7 96 1 "*"
C L "strtol" 7 96 1 "*"
C L "strtol" 7 96 1 "*"
C L "strtol" 7 96 1 "*"
F N "strtoul" 7 102 ""
V L "s" 7 102 "*int8" `796 
V L "endptr" 7 102 "*int8" `797 
V L "base" 7 102 "sint8" `798 
f G "strtoul" 7 102 "int16(*int8 s,*int8 endptr,sint8 base)" `795  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 7 96 2 "FUNCTION"
C L "strtoul" 7 104 1 "*"
C L "strtoul" 7 104 1 "*"
C L "strtoul" 7 104 1 "*"
F N "strtof" 7 111 ""
V L "s" 7 111 "*int8" `800 
V L "endptr" 7 111 "??0 *" `801 
f G "strtof" 7 111 "float(*int8 s,??0 * endptr)" `799  "provided for compatibility"
D G "strtof48" 7 117 "(s,e) strtof(s, e)"
D G "strtod" 7 118 "(s,e) strtof(s, e)"
C L "strtof" 7 104 1 "FUNCTION"
C L "strtof" 7 121 1 "*"
D G "atof" 7 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 7 121 1 "FUNCTION"
C L "strtof" 7 144 1 "*"
C L "strtof" 7 144 1 "*"
C L "strtof" 7 144 1 "*"
F N "atoe" 7 150 ""
V L "s" 7 150 "*int8" `804 
f G "atoe" 7 150 "float(*int8 s)" `803  "Pseudo-random sequence generation functions"
C L "atoe" 7 144 1 "FUNCTION"
C L "atoe" 7 161 1 "*"
C L "atoe" 7 161 1 "*"
C L "atoe" 7 161 1 "*"
C L "atoe" 7 161 1 "*"
C L "atoe" 7 161 1 "*"
F N "rand" 7 170 ""
f G "rand" 7 170 "int16()" `805  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
F N "srand" 7 192 ""
V L "seed" 7 192 "int32" `807 
f G "srand" 7 192 "void(int32 seed)" `806  "Memory management functions"
C L "srand" 7 172 3 "FUNCTION"
F N "system" 7 206 ""
V L "string" 7 206 "*int8" `809 
f G "system" 7 206 "sint8(*int8 string)" `808  "Searching and sorting utilities"
C L "system" 7 172 1 "FUNCTION"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 4 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
D G "labs" 7 250 "abs"
F N "div" 7 252 ""
V L "numer" 7 252 "sint8" `811 
V L "denom" 7 252 "sint8" `812 
f G "div" 7 252 "div_t(sint8 numer,sint8 denom)" `810 
F N "ldiv" 7 253 ""
V L "numer" 7 253 "sint16" `814 
V L "denom" 7 253 "sint16" `815 
f G "ldiv" 7 253 "ldiv_t(sint16 numer,sint16 denom)" `813  "Multibyte character functions"
C L "ldiv" 7 230 4 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
F N "div" 7 275 ""
V L "numer" 7 275 "sint8" `811 
V L "denom" 7 275 "sint8" `818 
F G "div" 7 276 "div_t(sint8 numer,sint8 denom)" `810 
V L "val" 7 277 "div_t" `816 
F N "ldiv" 7 283 ""
V L "numer" 7 283 "sint16" `814 
V L "denom" 7 283 "sint16" `825 
F G "ldiv" 7 284 "ldiv_t(sint16 numer,sint16 denom)" `813 
V L "val" 7 285 "ldiv_t" `823 
F N "atoe" 7 362 ""
V L "s" 7 362 "*int8" `831 
F G "atoe" 7 363 "float(*int8 s)" `803 
V L "pow10" 7 364 "float" `830 
V L "result" 7 365 "float" `831 
V L "sign" 7 366 "int8" `832 
V L "expsign" 7 367 "int8" `833 
V L "c" 7 368 "int8" `834 
V L "ptr" 7 369 "int8" `835 
V L "i" 7 370 "int8" `836 
V L "exp" 7 371 "float" `837 
V L "expcnt" 7 372 "int8" `838 
C L "atoe" 7 398 1 "FUNCTION"
F N "atoi" 7 430 ""
V L "s" 7 430 "*int8" `851 
F G "atoi" 7 431 "sint8(*int8 s)" `781 
V L "result" 7 432 "sint8" `850 
V L "sign" 7 433 "int8" `851 
V L "base" 7 433 "int8" `852 
V L "index" 7 433 "int8" `853 
V L "c" 7 434 "int8" `854 
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
F N "atol" 7 499 ""
V L "s" 7 499 "*int8" `856 
F G "atol" 7 500 "sint16(*int8 s)" `789 
V L "result" 7 501 "sint16" `855 
V L "sign" 7 502 "int8" `856 
V L "base" 7 502 "int8" `857 
V L "index" 7 502 "int8" `858 
V L "c" 7 503 "int8" `859 
C L "atol" 7 398 1 "FUNCTION"
C L "atol" 7 398 1 "FUNCTION"
C L "atol" 7 398 1 "FUNCTION"
C L "atol" 7 398 1 "FUNCTION"
C L "mult_with10" 7 398 1 "FUNCTION"
F N "mult_with10" 7 566 ""
V L "num" 7 566 "int32" `861 
F G "mult_with10" 7 567 "sint32(int32 num)" `860 
F N "atoi32" 7 572 ""
V L "s" 7 572 "*int8" `863 
F G "atoi32" 7 573 "sint32(*int8 s)" `783 
V L "result" 7 574 "sint32" `862 
V L "sign" 7 575 "int8" `863 
V L "base" 7 575 "int8" `864 
V L "index" 7 575 "int8" `865 
V L "c" 7 576 "int8" `866 
C L "atoi32" 7 398 1 "FUNCTION"
C L "atoi32" 7 398 1 "FUNCTION"
C L "atoi32" 7 398 1 "FUNCTION"
C L "atoi32" 7 398 1 "FUNCTION"
C L "atoi32" 7 398 1 "FUNCTION"
F N "itoa" 7 771 ""
V L "num" 7 771 "sint32" `786 
V L "base" 7 771 "int8" `787 
V L "s" 7 771 "*int8" `870 
F G "itoa" 7 772 "*int8(sint32 num,int8 base,*int8 s)" `785 
V L "temp" 7 773 "int32" `867 
V L "i" 7 774 "int8" `868 
V L "sign" 7 774 "int8" `869 
V L "cnt" 7 774 "int8" `870 
V L "c" 7 775 "int8" `871 
C L "itoa" 7 398 1 "FUNCTION"
C L "itoa" 7 398 1 "FUNCTION"
C L "itoa" 7 398 1 "FUNCTION"
C L "itoa" 7 398 1 "FUNCTION"
C L "itoa" 7 398 1 "FUNCTION"
F N "strtof" 7 886 ""
V L "s" 7 886 "*int8" `800 
V L "endptr" 7 886 "??0 *" `880 
F G "strtof" 7 887 "float(*int8 s,??0 * endptr)" `799 
V L "pow10" 7 888 "float" `878 
V L "result" 7 889 "float" `879 
V L "skip" 7 890 "int1" `880 
V L "sign" 7 890 "int1" `881 
V L "point" 7 890 "int1" `882 
V L "c" 7 891 "int8" `883 
V L "ptr" 7 892 "int8" `884 
F N "strtoul" 7 1104 ""
V L "s" 7 1104 "*int8" `796 
V L "endptr" 7 1104 "*int8" `797 
V L "base" 7 1104 "sint8" `889 
F G "strtoul" 7 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `795 
V L "sc" 7 1106 "*int8" `886 
V L "s1" 7 1106 "*int8" `887 
V L "sd" 7 1106 "*int8" `888 
V L "x" 7 1107 "int16" `889 
V L "sign" 7 1108 "int8" `890 
V L "digits" 7 1109 "int8[1]" `891 
C L "strtoul" 7 398 1 "FUNCTION"
C L "strtoul" 7 398 1 "FUNCTION"
C L "strtoul" 7 398 1 "FUNCTION"
F N "strtol" 7 1166 ""
V L "s" 7 1166 "*int8" `792 
V L "endptr" 7 1166 "*int8" `793 
V L "base" 7 1166 "sint8" `896 
F G "strtol" 7 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `791 
V L "sc" 7 1168 "*int8" `893 
V L "s1" 7 1168 "*int8" `894 
V L "sd" 7 1168 "*int8" `895 
V L "x" 7 1169 "sint16" `896 
V L "sign" 7 1170 "int8" `897 
V L "digits" 7 1171 "int8[1]" `898 
C L "strtol" 7 398 1 "FUNCTION"
C L "strtol" 7 398 1 "FUNCTION"
C L "strtol" 7 398 1 "FUNCTION"
F N "system" 7 1229 ""
V L "string" 7 1229 "*int8" `901 
F G "system" 7 1230 "sint8(*int8 string)" `808 
F N "mblen" 7 1234 ""
V L "s" 7 1234 "*int8" `901 
V L "n" 7 1234 "int8" `902 
F G "mblen" 7 1235 "int8(*int8 s,int8 n)" `900 
F N "mbtowc" 7 1239 ""
V L "pwc" 7 1239 "*int8" `904 
V L "s" 7 1239 "*int8" `905 
V L "n" 7 1239 "int8" `906 
F G "mbtowc" 7 1240 "int8(*int8 pwc,*int8 s,int8 n)" `903 
F N "wctomb" 7 1245 ""
V L "s" 7 1245 "*int8" `908 
V L "wchar" 7 1245 "int8" `909 
F G "wctomb" 7 1246 "int8(*int8 s,int8 wchar)" `907 
F N "mbstowcs" 7 1251 ""
V L "pwcs" 7 1251 "*int8" `911 
V L "s" 7 1251 "*int8" `912 
V L "n" 7 1251 "int8" `913 
F G "mbstowcs" 7 1252 "int8(*int8 pwcs,*int8 s,int8 n)" `910 
F N "wcstombs" 7 1257 ""
V L "s" 7 1257 "*int8" `915 
V L "pwcs" 7 1257 "*int8" `916 
V L "n" 7 1257 "int8" `917 
F G "wcstombs" 7 1258 "int8(*int8 s,*int8 pwcs,int8 n)" `914 
V G "_Randseed" 7 1267 "int32" `918 
F N "rand" 7 1269 ""
F G "rand" 7 1270 "int16()" `805 
F N "srand" 7 1275 ""
V L "seed" 7 1275 "int32" `923 
F G "srand" 7 1276 "void(int32 seed)" `806 
F N "*_Cmpfun" 7 1285 ""
V L "p1" 7 1285 "*int8" `923 
V L "p2" 7 1285 "*int8" `924 
T G "*_Cmpfun" 7 1285 "sint8(*int8 p1,*int8 p2)" `922 
F N "qsort" 7 1292 ""
V L "qdata" 7 1292 "*int8" `927 
V L "qitems" 7 1292 "int8" `928 
V L "qsize" 7 1292 "int8" `929 
V L "cmp" 7 1292 "_Cmpfun" `930 
F G "qsort" 7 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `926 
V L "m" 7 1293 "int8" `931 
V L "j" 7 1293 "int8" `932 
V L "i" 7 1293 "int8" `933 
V L "l" 7 1293 "int8" `934 
V L "done" 7 1294 "int1" `935 
V L "t" 7 1295 "int8[16]" `936 
F N "bsearch" 7 1320 ""
V L "key" 7 1320 "*int8" `939 
V L "base" 7 1320 "*int8" `940 
V L "num" 7 1320 "int8" `941 
V L "width" 7 1320 "int8" `942 
V L "cmp" 7 1320 "_Cmpfun" `943 
F G "bsearch" 7 1321 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `938 
V L "p" 7 1322 "*int8" `944 
V L "q" 7 1322 "*int8" `945 
V L "n" 7 1323 "int8" `946 
V L "pivot" 7 1324 "int8" `947 
V L "val" 7 1325 "sint8" `948 
C L "bsearch" 7 398 1 "FUNCTION"
D G "SPI_MODE_0" 0 35 " (SPI_L_TO_H | SPI_XMIT_L_TO_H)"
D G "SPI_MODE_1" 0 36 " (SPI_L_TO_H)"
D G "SPI_MODE_2" 0 37 " (SPI_H_TO_L)"
D G "SPI_MODE_3" 0 38 " (SPI_H_TO_L | SPI_XMIT_L_TO_H)"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
D G "RFID_H" 8 9 ""
D G "MAX_LEN" 8 24 "16" "Maximum length of an array. CHECK IF IT IS MAXIMUM LENGTH/SIZE OF FIFO!!!!!!!!!!!"
D G "MI_OK" 8 27 "0" "Everything A-OK."
D G "MI_NOTAGERR" 8 28 "1" "No tag error"
D G "MI_ERR" 8 29 "2" "General error"
D G "MFRC522_IDLE" 8 32 "0x00" "NO action; Cancel the current command"
D G "MFRC522_MEM" 8 33 "0x01" "Store 25 byte into the internal buffer."
D G "MFRC522_GENID" 8 34 "0x02" "Generates a 10 byte random ID number."
D G "MFRC522_CALCCRC" 8 35 "0x03" "CRC Calculate or selftest."
D G "MFRC522_TRANSMIT" 8 36 "0x04" "Transmit data"
D G "MFRC522_NOCMDCH" 8 37 "0x07" "No command change."
D G "MFRC522_RECEIVE" 8 38 "0x08" "Receive Data"
D G "MFRC522_TRANSCEIVE" 8 39 "0x0C" "Transmit and receive data,"
D G "MFRC522_AUTHENT" 8 40 "0x0E" "Authentication Key"
D G "MFRC522_SOFTRESET" 8 41 "0x0F" "Reset"
D G "MF1_REQIDL" 8 44 "0x26" "find the antenna area does not enter hibernation"
D G "MF1_REQALL" 8 45 "0x52" "find all the tags antenna area"
D G "MF1_ANTICOLL" 8 46 "0x93" "anti-collision"
D G "MF1_SELECTTAG" 8 47 "0x93" "election tag"
D G "MF1_AUTHENT1A" 8 48 "0x60" "authentication key A"
D G "MF1_AUTHENT1B" 8 49 "0x61" "authentication key B"
D G "MF1_READ" 8 50 "0x30" "Read Block"
D G "MF1_WRITE" 8 51 "0xA0" "write block"
D G "MF1_DECREMENT" 8 52 "0xC0" "debit"
D G "MF1_INCREMENT" 8 53 "0xC1" "recharge"
D G "MF1_RESTORE" 8 54 "0xC2" "transfer block data to the buffer"
D G "MF1_TRANSFER" 8 55 "0xB0" "save the data in the buffer"
D G "MF1_HALT" 8 56 "0x50" "Sleep"
D G "Reserved00" 8 61 "0x00"
D G "CommandReg" 8 62 "0x01"
D G "CommIEnReg" 8 63 "0x02"
D G "DivIEnReg" 8 64 "0x03"
D G "CommIrqReg" 8 65 "0x04"
D G "DivIrqReg" 8 66 "0x05"
D G "ErrorReg" 8 67 "0x06"
D G "Status1Reg" 8 68 "0x07"
D G "Status2Reg" 8 69 "0x08"
D G "FIFODataReg" 8 70 "0x09"
D G "FIFOLevelReg" 8 71 "0x0A"
D G "WaterLevelReg" 8 72 "0x0B"
D G "ControlReg" 8 73 "0x0C"
D G "BitFramingReg" 8 74 "0x0D"
D G "CollReg" 8 75 "0x0E"
D G "Reserved01" 8 76 "0x0F"
D G "Reserved10" 8 78 "0x10"
D G "ModeReg" 8 79 "0x11"
D G "TxModeReg" 8 80 "0x12"
D G "RxModeReg" 8 81 "0x13"
D G "TxControlReg" 8 82 "0x14"
D G "TxAutoReg" 8 83 "0x15"
D G "TxSelReg" 8 84 "0x16"
D G "RxSelReg" 8 85 "0x17"
D G "RxThresholdReg" 8 86 "0x18"
D G "DemodReg" 8 87 "0x19"
D G "Reserved11" 8 88 "0x1A"
D G "Reserved12" 8 89 "0x1B"
D G "MifareReg" 8 90 "0x1C"
D G "Reserved13" 8 91 "0x1D"
D G "Reserved14" 8 92 "0x1E"
D G "SerialSpeedReg" 8 93 "0x1F"
D G "Reserved20" 8 95 "0x20"
D G "CRCResultRegM" 8 96 "0x21"
D G "CRCResultRegL" 8 97 "0x22"
D G "Reserved21" 8 98 "0x23"
D G "ModWidthReg" 8 99 "0x24"
D G "Reserved22" 8 100 "0x25"
D G "RFCfgReg" 8 101 "0x26"
D G "GsNReg" 8 102 "0x27"
D G "CWGsPReg" 8 103 "0x28"
D G "ModGsPReg" 8 104 "0x29"
D G "TModeReg" 8 105 "0x2A"
D G "TPrescalerReg" 8 106 "0x2B"
D G "TReloadRegH" 8 107 "0x2C"
D G "TReloadRegL" 8 108 "0x2D"
D G "TCounterValueRegH" 8 109 "0x2E"
D G "TCounterValueRegL" 8 110 "0x2F"
D G "Reserved30" 8 112 "0x30"
D G "TestSel1Reg" 8 113 "0x31"
D G "TestSel2Reg" 8 114 "0x32"
D G "TestPinEnReg" 8 115 "0x33"
D G "TestPinValueReg" 8 116 "0x34"
D G "TestBusReg" 8 117 "0x35"
D G "AutoTestReg" 8 118 "0x36"
D G "VersionReg" 8 119 "0x37"
D G "AnalogTestReg" 8 120 "0x38"
D G "TestDAC1Reg" 8 121 "0x39"
D G "TestDAC2Reg" 8 122 "0x3A"
D G "TestADCReg" 8 123 "0x3B"
D G "Reserved31" 8 124 "0x3C"
D G "Reserved32" 8 125 "0x3D"
D G "Reserved33" 8 126 "0x3E"
D G "Reserved34" 8 127 "0x3F"
C L "writeToRegister" 8 1 3 "FUNCTION"
F N "writeToRegister" 8 138 ""
V L "addr" 8 138 "int8" `950 
V L "val" 8 138 "int8" `951 
F G "writeToRegister" 8 138 "void(int8 addr,int8 val)" `949 
C L "writeToRegister" 8 1 1 "FUNCTION"
C L "readFromRegister" 8 1 3 "FUNCTION"
F N "readFromRegister" 8 153 ""
V L "addr" 8 153 "int8" `953 
F G "readFromRegister" 8 153 "int8(int8 addr)" `952 
V L "val" 8 154 "int8" `954 
C L "setBitMask" 8 1 3 "FUNCTION"
F N "setBitMask" 8 170 ""
V L "addr" 8 170 "int8" `956 
V L "mask" 8 170 "int8" `957 
F G "setBitMask" 8 170 "void(int8 addr,int8 mask)" `955 
V L "current" 8 171 "int8" `958 
C L "clearBitMask" 8 1 3 "FUNCTION"
F N "clearBitMask" 8 183 ""
V L "addr" 8 183 "int8" `960 
V L "mask" 8 183 "int8" `961 
F G "clearBitMask" 8 183 "void(int8 addr,int8 mask)" `959 
V L "current" 8 184 "int8" `962 
C L "reset" 8 1 1 "FUNCTION"
F N "reset" 8 195 ""
F G "reset" 8 195 "void()" `963 
C L "MFRC_begin" 8 1 1 "FUNCTION"
F N "MFRC_begin" 8 206 ""
F G "MFRC_begin" 8 206 "void()" `964 
C L "MFRC_begin" 8 1 1 "FUNCTION"
C L "MFRC_begin" 8 1 1 "FUNCTION"
C L "MFRC_begin" 8 1 1 "FUNCTION"
C L "MFRC_begin" 8 1 1 "FUNCTION"
C L "MFRC_begin" 8 1 1 "FUNCTION"
C L "MFRC_begin" 8 1 1 "FUNCTION"
C L "MFRC_begin" 8 1 1 "FUNCTION"
C L "getFirmwareVersion" 8 1 2 "FUNCTION"
F N "getFirmwareVersion" 8 233 ""
F G "getFirmwareVersion" 8 233 "int8()" `965 
V L "response" 8 234 "int8" `966 
C L "commandTag" 8 1 10 "FUNCTION"
F N "commandTag" 8 259 ""
V L "cmd" 8 259 "int8" `968 
V L "data" 8 259 "*int8" `969 
V L "dlen" 8 259 "int8" `970 
V L "result" 8 259 "*int8" `971 
V L "rlen" 8 259 "*int8" `972 
F G "commandTag" 8 259 "int8(int8 cmd,*int8 data,int8 dlen,*int8 result,*int8 rlen)" `967 
V L "status" 8 260 "int8" `973 
V L "irqEn" 8 261 "int8" `974 
V L "waitIRq" 8 262 "int8" `975 
V L "lastBits" 8 263 "int8" `976 
V L "n" 8 263 "int8" `977 
V L "i" 8 264 "int8" `978 
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 2 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 2 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "commandTag" 8 1 1 "FUNCTION"
C L "requestTag" 8 1 12 "FUNCTION"
F N "requestTag" 8 365 ""
V L "mode" 8 365 "int8" `980 
V L "data" 8 365 "*int8" `981 
F G "requestTag" 8 365 "int8(int8 mode,*int8 data)" `979 
V L "status" 8 366 "int8" `982 
V L "len" 8 366 "int8" `983 
C L "requestTag" 8 1 1 "FUNCTION"
C L "antiCollision" 8 1 7 "FUNCTION"
F N "antiCollision" 8 394 ""
V L "serial" 8 394 "*int8" `985 
F G "antiCollision" 8 394 "int8(*int8 serial)" `984 
V L "status" 8 395 "int8" `986 
V L "i" 8 395 "int8" `987 
V L "len" 8 395 "int8" `988 
V L "check" 8 396 "int8" `989 
C L "antiCollision" 8 1 1 "FUNCTION"
C L "antiCollision" 8 1 1 "FUNCTION"
C L "antiCollision" 8 1 1 "FUNCTION"
C L "antiCollision" 8 1 2 "FUNCTION"
C L "calculateCRC" 8 1 5 "FUNCTION"
F N "calculateCRC" 8 431 ""
V L "data" 8 431 "*int8" `991 
V L "len" 8 431 "int8" `992 
V L "result" 8 431 "*int8" `993 
F G "calculateCRC" 8 431 "void(*int8 data,int8 len,*int8 result)" `990 
V L "i" 8 432 "int8" `994 
V L "n" 8 433 "int8" `995 
C L "calculateCRC" 8 1 1 "FUNCTION"
C L "calculateCRC" 8 1 2 "FUNCTION"
C L "calculateCRC" 8 1 1 "FUNCTION"
C L "calculateCRC" 8 1 2 "FUNCTION"
C L "selectTag" 8 1 3 "FUNCTION"
F N "selectTag" 8 463 ""
V L "serial" 8 463 "*int8" `997 
F G "selectTag" 8 463 "int8(*int8 serial)" `996 
V L "i" 8 464 "int8" `998 
V L "status" 8 464 "int8" `999 
V L "len" 8 464 "int8" `1000 
V L "sak" 8 465 "int8" `1001 
V L "buffer" 8 466 "int8[9]" `1002 
C L "authenticate" 8 1 8 "FUNCTION"
F N "authenticate" 8 499 ""
V L "mode" 8 499 "int8" `1004 
V L "block" 8 499 "int8" `1005 
V L "key" 8 499 "*int8" `1006 
V L "serial" 8 499 "*int8" `1007 
F G "authenticate" 8 499 "int8(int8 mode,int8 block,*int8 key,*int8 serial)" `1003 
V L "i" 8 500 "int8" `1008 
V L "status" 8 500 "int8" `1009 
V L "len" 8 500 "int8" `1010 
V L "buffer" 8 501 "int8[12]" `1011  "Verify the command block address + sector + password + tag serial number"
C L "authenticate" 8 1 1 "FUNCTION"
C L "authenticate" 8 1 1 "FUNCTION"
C L "authenticate" 8 1 1 "FUNCTION"
C L "authenticate" 8 1 1 "FUNCTION"
C L "readFromTag" 8 1 6 "FUNCTION"
F N "readFromTag" 8 533 ""
V L "block" 8 533 "int8" `1013 
V L "result" 8 533 "*int8" `1014 
F G "readFromTag" 8 533 "int8(int8 block,*int8 result)" `1012 
V L "status" 8 534 "int8" `1015 
V L "len" 8 534 "int8" `1016 
C L "writeToTag" 8 1 6 "FUNCTION"
F N "writeToTag" 8 558 ""
V L "block" 8 558 "int8" `1018 
V L "data" 8 558 "*int8" `1019 
F G "writeToTag" 8 558 "int8(int8 block,*int8 data)" `1017 
V L "status" 8 559 "int8" `1020 
V L "i" 8 559 "int8" `1021 
V L "len" 8 559 "int8" `1022 
V L "buffer" 8 560 "int8[18]" `1023 
C L "haltTag" 8 1 4 "FUNCTION"
F N "haltTag" 8 597 ""
F G "haltTag" 8 597 "int8()" `1024 
V L "status" 8 598 "int8" `1025 
V L "len" 8 598 "int8" `1026 
V L "buffer" 8 599 "int8[4]" `1027 
C L "haltTag" 8 1 1 "FUNCTION"
E G "UID_FAILED" 0 48 "0" `1029 
E G "UID_NOT_COMPLETE" 0 49 "4" `1030 
E G "MIFARE_MINI" 0 50 "9" `1031 
E G "MIFARE_CLASSIC_1K" 0 51 "8" `1032 
E G "MIFARE_CLASSIC_4K" 0 52 "24" `1033 
E G "MIFARE_DESFIRE" 0 53 "32" `1034 
V G "" 0 53 ""
V G "FoundTag" 0 58 "int8" `1035  "Variable used to check if Tag was found"
V G "ReadTag" 0 59 "int8" `1036  "Variable used to store anti-collision value to read Tag information"
V G "TagData" 0 60 "int8[16]" `1037  "Variable used to store Full Tag Data"
V G "serial" 0 61 "int8[5]" `1038 
V G "i" 0 62 "int8" `1039  "for looping"
V G "j" 0 63 "int8" `1040  "for looping again"
V G "status" 0 64 "int8" `1041  "to store the return status of command operations"
V G "data" 0 65 "int8[16]" `1042  "to store any data"
V G "buffer2" 0 67 "int8[20]" `1043  "keys for the card"
V G "keyA" 0 70 "int8[6]" `1044 
V G "keyB" 0 71 "int8[6]" `1045 
V G "writeData" 0 75 "int8[1]" `1046 
C L "CheckRFIDHardware" 0 43 1 "FUNCTION"
F N "CheckRFIDHardware" 0 83 ""
F G "CheckRFIDHardware" 0 83 "void()" `1047 
V L "version" 0 85 "int8" `1048  "/Version of RFID read/writer is stored 0x92 is version 2.0"
C L "CheckRFIDHardware" 0 43 1 "FUNCTION"
C L "CheckRFIDHardware" 0 43 1 "FUNCTION"
C L "CheckRFIDHardware" 0 43 1 "FUNCTION"
C L "readMifareCard" 0 43 2 "FUNCTION"
F N "readMifareCard" 0 117 ""
F G "readMifareCard" 0 117 "void()" `1071  "s50 has 64 blocks of memory"
C L "readMifareCard" 0 43 1 "FUNCTION"
C L "readMifareCard" 0 43 1 "FUNCTION"
C L "readMifareCard" 0 43 2 "FUNCTION"
C L "readMifareCard" 0 43 1 "FUNCTION"
C L "readMifareCard" 0 43 1 "FUNCTION"
C L "readMifareCard" 0 43 2 "FUNCTION"
F N "writeMifare" 0 165 ""
F G "writeMifare" 0 165 "void()" `1081 
V L "block" 0 166 "int8" `1082 
C L "writeMifare" 0 43 1 "FUNCTION"
C L "writeMifare" 0 43 1 "FUNCTION"
F N "MAIN" 0 202 ""
F G "MAIN" 0 202 "void()" `1090  "setup spi line"
C L "MAIN" 0 43 1 "FUNCTION"
C L "MAIN" 0 43 2 "FUNCTION"
C L "MAIN" 0 43 1 "FUNCTION"
C L "MAIN" 0 43 2 "FUNCTION"
C L "MAIN" 0 43 1 "FUNCTION"
C L "MAIN" 0 43 1 "FUNCTION"
C L "MAIN" 0 43 1 "FUNCTION"
C L "MAIN" 0 43 1 "FUNCTION"
C L "MAIN" 0 43 1 "FUNCTION"
C L "MAIN" 0 43 1 "FUNCTION"
V L "sak" 0 260 "int8" `1104 
C L "MAIN" 0 43 1 "FUNCTION"
C L "MAIN" 0 43 2 "FUNCTION"
C L "MAIN" 0 43 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
